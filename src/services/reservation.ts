import { Platform, Alert } from 'react-native';
import * as Calendar from 'expo-calendar';
import { Reservation } from '../types/assistant';
import { databaseService } from './database';

class ReservationService {
  private hasCalendarPermission = false;

  // Solicitar permiss√£o do calend√°rio
  async requestCalendarPermission(): Promise<boolean> {
    try {
      if (Platform.OS === 'web') {
        console.log('Web n√£o suporta calend√°rio');
        return false;
      }

      const { status } = await Calendar.requestCalendarPermissionsAsync();
      
      if (status === 'granted') {
        this.hasCalendarPermission = true;
        console.log('‚úÖ Permiss√£o do calend√°rio concedida');
        return true;
      } else {
        console.log('‚ùå Permiss√£o do calend√°rio negada');
        this.openSettings();
        return false;
      }
    } catch (error) {
      console.error('Erro ao solicitar permiss√£o do calend√°rio:', error);
      return false;
    }
  }

  // Abrir configura√ß√µes do dispositivo
  private openSettings() {
    if (Platform.OS === 'ios') {
      Alert.alert(
        'Configura√ß√µes',
        'V√° para Configura√ß√µes > Privacidade e Seguran√ßa > Calend√°rio e ative o acesso para este app.'
      );
    } else {
      Alert.alert(
        'Configura√ß√µes',
        'V√° para Configura√ß√µes > Apps > Smart Menu > Permiss√µes e ative o acesso ao calend√°rio.'
      );
    }
  }

  // Criar uma nova reserva
  async createReservation(reservationData: Omit<Reservation, 'id' | 'createdAt' | 'updatedAt'>): Promise<Reservation> {
    try {
      console.log('üîÑ ReservationService: Iniciando cria√ß√£o de reserva');
      console.log('üìã ReservationService: Dados recebidos:', reservationData);

      // Validar formato da data e hora
      const dateRegex = /^(\d{2})\/(\d{2})\/(\d{4})$/;
      const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
      const phoneRegex = /^\(\d{2}\) \d{5}-\d{4}$/;
      
      if (!dateRegex.test(reservationData.date)) {
        throw new Error('Formato de data inv√°lido. Use DD/MM/AAAA');
      }
      
      if (!timeRegex.test(reservationData.time)) {
        throw new Error('Formato de hora inv√°lido. Use HH:MM');
      }
      
      if (!phoneRegex.test(reservationData.customerPhone)) {
        throw new Error('Formato de telefone inv√°lido. Use (XX) XXXXX-XXXX');
      }
      
      // Validar se a data √© v√°lida
      const [day, month, year] = reservationData.date.split('/').map(Number);
      const testDate = new Date(year, month - 1, day);
      
      if (isNaN(testDate.getTime()) || 
          testDate.getFullYear() !== year || 
          testDate.getMonth() !== month - 1 || 
          testDate.getDate() !== day) {
        throw new Error('Data inv√°lida');
      }

      console.log('‚úÖ ReservationService: Valida√ß√µes passaram');

      const reservation: Reservation = {
        ...reservationData,
        id: `reservation-${Date.now()}`,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      console.log('üìã ReservationService: Reserva criada:', reservation);

      // Salvar no banco de dados
      console.log('üíæ ReservationService: Salvando no banco...');
      const saved = await databaseService.saveReservation(reservation);
      
      if (!saved) {
        throw new Error('Falha ao salvar reserva no banco de dados');
      }
      
      console.log('‚úÖ ReservationService: Reserva salva no banco');

      // Adicionar ao calend√°rio se tiver permiss√£o
      if (this.hasCalendarPermission) {
        console.log('üìÖ ReservationService: Adicionando ao calend√°rio...');
        await this.addToCalendar(reservation);
      }

      console.log('‚úÖ ReservationService: Reserva criada com sucesso');
      return reservation;
    } catch (error) {
      console.error('‚ùå ReservationService: Erro ao criar reserva:', error);
      throw new Error('N√£o foi poss√≠vel criar a reserva');
    }
  }

  // Adicionar reserva ao calend√°rio
  private async addToCalendar(reservation: Reservation): Promise<void> {
    try {
      // Buscar calend√°rios dispon√≠veis
      const calendars = await Calendar.getCalendarsAsync(Calendar.EntityTypes.EVENT);
      const defaultCalendar = calendars.find(cal => cal.isPrimary) || calendars[0];

      if (!defaultCalendar) {
        throw new Error('Nenhum calend√°rio dispon√≠vel');
      }

      // Validar e formatar a data e hora
      const [day, month, year] = reservation.date.split('/').map(Number);
      const [hour, minute] = reservation.time.split(':').map(Number);
      
      // Validar se os valores s√£o v√°lidos
      if (!day || !month || !year || hour === undefined || minute === undefined) {
        throw new Error('Data ou hora inv√°lida');
      }
      
      // Criar data com valida√ß√£o
      const eventDate = new Date(year, month - 1, day, hour, minute);
      
      // Verificar se a data √© v√°lida
      if (isNaN(eventDate.getTime())) {
        throw new Error('Data inv√°lida');
      }
      
      const endDate = new Date(eventDate.getTime() + 2 * 60 * 60 * 1000); // 2 horas de dura√ß√£o

      const eventDetails = {
        title: `Reserva - ${reservation.restaurantName}`,
        startDate: eventDate,
        endDate: endDate,
        location: reservation.restaurantName,
        notes: `Reserva para ${reservation.partySize} pessoas${reservation.specialRequests ? `\n\nPedidos especiais: ${reservation.specialRequests}` : ''}`,
        alarms: [
          { relativeOffset: -60 }, // 1 hora antes
          { relativeOffset: -15 }, // 15 minutos antes
        ],
      };

      await Calendar.createEventAsync(defaultCalendar.id, eventDetails);
      
      console.log('‚úÖ Reserva adicionada ao calend√°rio com sucesso');
    } catch (error) {
      console.error('Erro ao adicionar ao calend√°rio:', error);
      // N√£o falhar a reserva se n√£o conseguir adicionar ao calend√°rio
    }
  }

  // Buscar reservas do usu√°rio
  async getUserReservations(): Promise<Reservation[]> {
    try {
      console.log('üîÑ Buscando reservas do usu√°rio...');
      const reservations = await databaseService.getReservations();
      console.log('üìã Reservas encontradas:', reservations.length);
      
      // Converter ReservationRecord para Reservation
      return reservations.map(record => ({
        ...record,
        status: record.status as "pending" | "confirmed" | "cancelled" | "completed"
      }));
    } catch (error) {
      console.error('‚ùå Erro ao buscar reservas:', error);
      return [];
    }
  }

  // Atualizar status de uma reserva
  async updateReservationStatus(reservationId: string, status: Reservation['status']): Promise<boolean> {
    try {
      console.log('üîÑ ReservationService: Atualizando status da reserva:', reservationId, 'para:', status);
      const success = await databaseService.updateReservationStatus(reservationId, status);
      console.log('‚úÖ ReservationService: Status atualizado com sucesso');
      return success;
    } catch (error) {
      console.error('‚ùå ReservationService: Erro ao atualizar status da reserva:', error);
      return false;
    }
  }

  // Cancelar reserva
  async cancelReservation(reservationId: string): Promise<boolean> {
    return await this.updateReservationStatus(reservationId, 'cancelled');
  }

  // Verificar se tem reservas pr√≥ximas (pr√≥ximas 24h)
  async getUpcomingReservations(): Promise<Reservation[]> {
    try {
      console.log('üîç ReservationService: Buscando reservas pr√≥ximas...');
      const reservations = await databaseService.getUpcomingReservations();
      console.log('üìã ReservationService: Reservas pr√≥ximas encontradas:', reservations.length);
      return reservations.map(record => ({
        ...record,
        status: record.status as "pending" | "confirmed" | "cancelled" | "completed"
      }));
    } catch (error) {
      console.error('‚ùå ReservationService: Erro ao buscar reservas pr√≥ximas:', error);
      return [];
    }
  }

  // Buscar reservas por status
  async getReservationsByStatus(status: Reservation['status']): Promise<Reservation[]> {
    try {
      console.log('üîç ReservationService: Buscando reservas por status:', status);
      const reservations = await databaseService.getReservationsByStatus(status);
      console.log('üìã ReservationService: Reservas encontradas:', reservations.length);
      return reservations.map(record => ({
        ...record,
        status: record.status as "pending" | "confirmed" | "cancelled" | "completed"
      }));
    } catch (error) {
      console.error('‚ùå ReservationService: Erro ao buscar reservas por status:', error);
      return [];
    }
  }

  // Buscar reservas por restaurante
  async getReservationsByRestaurant(restaurantId: string): Promise<Reservation[]> {
    try {
      console.log('üîç ReservationService: Buscando reservas por restaurante:', restaurantId);
      const reservations = await databaseService.getReservationsByRestaurant(restaurantId);
      console.log('üìã ReservationService: Reservas encontradas:', reservations.length);
      return reservations.map(record => ({
        ...record,
        status: record.status as "pending" | "confirmed" | "cancelled" | "completed"
      }));
    } catch (error) {
      console.error('‚ùå ReservationService: Erro ao buscar reservas por restaurante:', error);
      return [];
    }
  }

  // Deletar reserva
  async deleteReservation(reservationId: string): Promise<boolean> {
    try {
      console.log('üóëÔ∏è ReservationService: Deletando reserva:', reservationId);
      const success = await databaseService.deleteReservation(reservationId);
      console.log('‚úÖ ReservationService: Reserva deletada com sucesso');
      return success;
    } catch (error) {
      console.error('‚ùå ReservationService: Erro ao deletar reserva:', error);
      return false;
    }
  }
}

export const reservationService = new ReservationService(); 